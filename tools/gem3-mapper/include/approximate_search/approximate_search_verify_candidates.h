/*
 *  GEM-Mapper v3 (GEM3)
 *  Copyright (c) 2011-2017 by Santiago Marco-Sola  <santiagomsola@gmail.com>
 *
 *  This file is part of GEM-Mapper v3 (GEM3).
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * PROJECT: GEM-Mapper v3 (GEM3)
 * AUTHOR(S): Santiago Marco-Sola <santiagomsola@gmail.com>
 * DESCRIPTION:
 *   Approximate-String-Matching (ASM) module to verify
 *   the filtering-candidates generated by previous stages
 */

#ifndef APPROXIMATE_SEARCH_VERIFY_CANDIDATES_H_
#define APPROXIMATE_SEARCH_VERIFY_CANDIDATES_H_

#include "approximate_search/approximate_search.h"
#include "gpu/gpu_buffer_kmer_filter.h"
#include "gpu/gpu_buffer_bpm_distance.h"
#include "gpu/gpu_buffer_bpm_align.h"
#include "matches/paired_matches.h"
#include "mapper/mapper_stats.h"

/*
 * Verify Candidates
 */
void approximate_search_verify_candidates(
    approximate_search_t* const search,
    matches_t* const matches);

/*
 * Verify Extend Candidate
 */
void approximate_search_verify_extend_candidate(
    filtering_candidates_t* const filtering_candidates,
    pattern_t* const candidate_pattern,
    const match_trace_t* const extended_match,
    mapper_stats_t* const mapper_stats,
    paired_matches_t* const paired_matches,
    const sequence_end_t candidate_end);

/*
 * Kmer-filter Buffered
 */
void approximate_search_kmer_filter_buffered_copy(
    approximate_search_t* const search,
    gpu_buffer_kmer_filter_t* const gpu_buffer_kmer_filter);
void approximate_search_kmer_filter_buffered_retrieve(
    approximate_search_t* const search,
    gpu_buffer_kmer_filter_t* const gpu_buffer_kmer_filter);

/*
 * BPM-Distance Buffered
 */
void approximate_search_bpm_distance_buffered_copy(
    approximate_search_t* const search,
    gpu_buffer_bpm_distance_t* const gpu_buffer_bpm_distance);
void approximate_search_bpm_distance_buffered_retrieve(
    approximate_search_t* const search,
    gpu_buffer_bpm_distance_t* const gpu_buffer_bpm_distance);

/*
 * BPM-Align Buffered
 */
void approximate_search_bpm_align_buffered_update(
    approximate_search_t* const search);
void approximate_search_bpm_align_buffered_copy(
    approximate_search_t* const search,
    gpu_buffer_bpm_align_t* const gpu_buffer_bpm_align);
void approximate_search_bpm_align_buffered_retrieve(
    approximate_search_t* const search,
    gpu_buffer_bpm_align_t* const gpu_buffer_bpm_align,
    matches_t* const matches);

#endif /* APPROXIMATE_SEARCH_VERIFY_CANDIDATES_H_ */
